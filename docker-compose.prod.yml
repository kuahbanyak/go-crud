# Production Docker Compose Configuration
# Uses external Azure SQL Database (no local SQL Server container)

version: '3.8'

services:
  # Go CRUD API Service
  go-crud-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      # Application Configuration
      - GIN_MODE=release
      - LOG_LEVEL=info
      - CONFIG_ENV=prod
      - SERVER_PORT=8080

      # Azure SQL Database Configuration (using existing dev DB for testing)
      - DB_HOST=devdbsql.database.windows.net
      - DB_PORT=1433
      - DB_USER=devsql
      - DB_PASSWORD=Kuahpisah1
      - DB_DATABASE=sqldev

      # Security
      - JWT_SECRET=production-jwt-secret-change-this-to-something-very-secure-32chars-minimum
      - JWT_EXPIRATION=24

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=secure-redis-password-123

    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Redis Cache (for application caching)
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass secure-redis-password-123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
