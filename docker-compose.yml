version: '3.8'

services:
  # Go CRUD API Service
  go-crud-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - SERVER_PORT=8080
      - GIN_MODE=debug
      - LOG_LEVEL=info
      - DB_HOST=sqlserver
      - DB_PORT=1433
      - DB_USER=sa
      - DB_PASSWORD=YourStrong@Passw0rd
      - DB_DATABASE=gocrud
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRATION=24
    depends_on:
      sqlserver:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    networks:
      - go-crud-network
    restart: unless-stopped

  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - go-crud-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -C -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  # Database initializer - just create the database, let GORM handle the schema
  db-init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      sqlserver:
        condition: service_healthy
    volumes:
      - ./scripts/init-db-simple.sql:/tmp/init-db.sql
    networks:
      - go-crud-network
    command: >
      bash -c "
        sleep 5 &&
        /opt/mssql-tools18/bin/sqlcmd -S sqlserver -U sa -P YourStrong@Passw0rd -C -i /tmp/init-db.sql &&
        echo 'Database initialization completed'
      "
    restart: "no"

networks:
  go-crud-network:
    driver: bridge

volumes:
  sqlserver_data:
